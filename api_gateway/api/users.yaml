/users:
  get:
    tags:
      - Users
    summary: Read all users
    description: ''
    operationId: api_gateway.server.endpoints.users.read_all_users
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              type: array
              description: A list of users
              items:
                $ref: '#/components/schemas/DisplayUser'
  post:
    tags:
      - Users
    summary: Create a user
    description: ''
    operationId: api_gateway.server.endpoints.users.create_user
    requestBody:
      description: The new user object to be created
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddUser'
    responses:
      201:
        description: User created.
        content:
          application/json:
            schema:
              description: The newly created user.
              $ref: '#/components/schemas/DisplayUser'
      400:
        description: Could not create user <username>. User already exists.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/users/{user_id}:
  parameters:
    - name: user_id
      in: path
      description: The id of the user to be fetched
      required: true
      schema:
        type: integer
  get:
    tags:
      - Users
    summary: Get a user
    description: ''
    operationId: api_gateway.server.endpoints.users.read_user
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              description: The user object matching the user id inputted
              $ref: '#/components/schemas/DisplayUser'
      404:
        description: Could not display user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  put:
    tags:
      - Users
    summary: Update a user
    description: ''
    operationId: api_gateway.server.endpoints.users.update_user
    requestBody:
      description: Updated fields for the user object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EditUser'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              description: The updated user.
              $ref: '#/components/schemas/DisplayUser'
      400:
        description: Invalid password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      404:
        description: Could not edit user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  delete:
    tags:
      - Users
    summary: Delete a user
    description: ''
    operationId: api_gateway.server.endpoints.users.delete_user
    responses:
      204:
        description: Success
      401:
        description: Could not delete user <username>. User is current user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      404:
        description: Could not delete user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/users/permissions:
  get:
    tags:
      - Users
    summary: Get a user's permissions JSON
    description: ''
    operationId: api_gateway.server.endpoints.users.list_permissions
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              description: The user object matching the user id inputted
              $ref: '#/components/schemas/DisplayUser'
      404:
        description: Could not display user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

/users/personal_data/{username}:
  parameters:
    - name: username
      in: path
      description: The username of the user to be fetched
      required: true
      schema:
        type: string
  get:
    tags:
      - Users
    summary: Get personal user data
    description: ''
    operationId: api_gateway.server.endpoints.users.read_personal_user
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              description: The user object matching the username inputted
              $ref: '#/components/schemas/DisplayUser'
      404:
        description: Could not display user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
  put:
    tags:
      - Users
    summary: Update personal user data
    description: ''
    operationId: api_gateway.server.endpoints.users.update_personal_user
    requestBody:
      description: Updated fields for the user object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EditPersonalUser'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              description: The updated user.
              $ref: '#/components/schemas/DisplayUser'
      400:
        description: Invalid password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      404:
        description: Could not edit user <username>. User does not exist.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'