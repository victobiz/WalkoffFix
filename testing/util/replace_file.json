{
  "app_name":"basics",
  "app_version":"1.0.0",
  "file_path":"src/app.py",
  "file_data":"import socket\nimport asyncio\nimport time\nimport random\nimport json\n\nfrom walkoff_app_sdk.app_base import AppBase\n\n\nclass Basics(AppBase):\n    \"\"\"\n    An example of a Walkoff App.\n    Inherit from the AppBase class to have Redis, logging, and console logging set up behind the scenes.\n    \"\"\"\n    __version__ = \"1.0.0\"\n    app_name = \"basics\"  # this needs to match \"name\" in api.yaml\n\n    def __init__(self, redis, logger):\n        \"\"\"\n        Each app should have this __init__ to set up Redis and logging.\n        :param redis:\n        :param logger:\n        \"\"\"\n        super().__init__(redis, logger)\n\n    async def hello_world(self):\n        \"\"\"\n        Returns Hello World from the hostname the action is run on\n        :return: Hello World from your hostname\n        \"\"\"\n        message = f\"HELLO WORLD {socket.gethostname()} in workflow {self.current_execution_id}!\"\n\n        # This logs to both the container's stdout and to the UI console in the workflow editor\n        self.logger.info(message)\n\n        return message\n\n    async def string_to_json(self, call):\n        this = json.loads(call)\n        return this\n\n    async def echo_string(self, call):\n        return f\"ECHOING: {call}\"\n\n    async def return_plus_one(self, number):\n        return number + 1\n\n    async def pause(self, seconds):\n        time.sleep(seconds)\n        return seconds\n\n    async def random_number(self):\n        return random.random()\n\n    async def echo_array(self, data):\n        self.logger.info(f\"Echoing array: {data}\")\n        return data\n\n    async def echo_json(self, data):\n        self.logger.info(f\"Echoing JSON: {data}\")\n        return data\n\n    async def sample_report_data(self):\n        message = f\"Alpha,Beta,Charlie\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\\n1,2,3\\n4,5,6\"\n        self.logger.info(message)\n        return message\n\n\nif __name__ == \"__main__\":\n    asyncio.run(Basics.run())\n"
}